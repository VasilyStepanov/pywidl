// source: tests/data/02_all.idl
// output: tests/received.idl
// template: tests.idl
// template_type: 0



interface Type {
  attribute short _short;
  attribute unsigned short _ushort;
  attribute long _long;
  attribute unsigned long _ulong;
  attribute long long _llong;
  attribute unsigned long long _ullong;
  attribute boolean _boolean;
  attribute byte _byte;
  attribute octet _octet;
  attribute float _float;
  attribute double _double;
  attribute double _double;
  attribute DOMString _string;
  attribute MyInterface _myiface;
  attribute sequence<long> _sequence;
  attribute object _object;
  attribute date _date;
  attribute any _any;
  attribute (Node or (Date or Event) or (XMLHttpRequest or DOMString)? or (float[] or NodeList)[] or any[]?[]) _union;
};



interface TypeSuffix {
  attribute long? _null;
  attribute long[] _arr;
  attribute long[]?[][]?[][][] _arrarr;
  attribute sequence<long[]?[][]?[][][]> _sequence;
  attribute any[]?[][]?[][][] _any;
};



interface TypeSpecifier {
  inherit attribute long _inh;
  readonly attribute long _ro;
  inherit readonly attribute long _inhro;
  stringifier inherit readonly attribute long _sinhro;
};



[Replaceable,
 Constructor(float x, float y),
 NamedConstructor=Image(DOMString src),
 PutForwards=name]
interface InterfaceWAttributes {
  [Replaceable,
   Constructor(float x, float y),
   NamedConstructor=Image(DOMString src),
   PutForwards=name]
  attribute long _long;
};



interface Operation {
  void();
  long operation();
  static long operation();
  getter setter creator deleter legacycaller long operation(long arg, [Replaceable] long ext_arg, optional long opt_arg, optional long opt_arg2=123, optional long opt_arg3=123, optional DOMString opt_arg4="abc", long... el_arg);
  stringifier long soperation();
};



interface Const {
  const long _long = 1;
  const long? _nulllong = null;
  const boolean _b1 = true;
  const boolean _b2 = false;
  const float _f = 1.23;
  [Replaceable,
   Constructor(float x, float y),
   NamedConstructor=Image(DOMString src),
   PutForwards=name]
  const long _ea = 123;
};



Interface implements Functionality;



[WTF]
typedef [Clamp] octet Value;



[Replaceable]
dictionary B : A {
  long a;
  [Clamp]
  long b;
  long c=123;
};



[Replaceable]
partial interface Type {
  attribute long a;
};



callback interface CallbackInterface {
  attribute DOMString? option1;
  attribute DOMString? option2;
  attribute long? option3;
};
